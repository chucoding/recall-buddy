import React, { useState, useEffect, useCallback, useRef } from 'react';
import { doc, getDoc, setDoc, deleteDoc, collection, onSnapshot } from 'firebase/firestore';
import { reauthenticateWithPopup } from 'firebase/auth';
import { useIndexedDB } from 'react-indexed-db-hook';
import { auth, db, githubProvider } from '../firebase';
import { getRepositories, getBranches, Branch } from '../api/github-api';
import { Repository } from '@recall-buddy/shared';
import TermsLinks from '../widgets/TermsLinks';
import './Settings.css';

interface RepositorySettings {
  repositoryFullName: string;
  repositoryUrl: string;
  branch: string;
}

interface Notice {
  id: string;
  message: string;
}

// Ï∫êÏãú ÏÑ§Ï†ï (Ïª¥Ìè¨ÎÑåÌä∏ Ïô∏Î∂ÄÎ°ú Ïù¥Îèô)
const CACHE_KEY = 'github_repositories';
const getBranchCacheKey = (owner: string, repo: string) => `github_branches_${owner}_${repo}`;

const Settings: React.FC = () => {
  const [settings, setSettings] = useState<RepositorySettings>({
    repositoryFullName: '',
    repositoryUrl: '',
    branch: 'main',
  });
  const [repositories, setRepositories] = useState<Repository[]>([]);
  const [branches, setBranches] = useState<Branch[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [loadingRepos, setLoadingRepos] = useState<boolean>(false);
  const [loadingBranches, setLoadingBranches] = useState<boolean>(false);
  const [saving, setSaving] = useState<boolean>(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);
  const [isDropdownOpen, setIsDropdownOpen] = useState<boolean>(false);
  const [isBranchDropdownOpen, setIsBranchDropdownOpen] = useState<boolean>(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState<boolean>(false);
  const [deleteConfirmText, setDeleteConfirmText] = useState<string>('');
  const [deleting, setDeleting] = useState<boolean>(false);
  const [notices, setNotices] = useState<Notice[]>([]);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const branchDropdownRef = useRef<HTMLDivElement>(null);

  // IndexedDB ÌõÖ
  const repositoriesDB = useIndexedDB('repositories');
  const flashcardsDB = useIndexedDB('data'); // ÌîåÎûòÏãúÏπ¥Îìú Îç∞Ïù¥ÌÑ∞ Ïä§ÌÜ†Ïñ¥
  
  // ÎìúÎ°≠Îã§Ïö¥ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Í∞êÏßÄ
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsDropdownOpen(false);
      }
      if (branchDropdownRef.current && !branchDropdownRef.current.contains(event.target as Node)) {
        setIsBranchDropdownOpen(false);
      }
    };

    if (isDropdownOpen || isBranchDropdownOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isDropdownOpen, isBranchDropdownOpen]);

  // FirestoreÏóêÏÑú Í≥µÏßÄÏÇ¨Ìï≠ Ïã§ÏãúÍ∞Ñ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const unsubscribe = onSnapshot(
      collection(db, 'notices'),
      (snapshot) => {
        const noticesList = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        } as Notice));
        
        console.log('üì¢ Í≥µÏßÄÏÇ¨Ìï≠ ÏóÖÎç∞Ïù¥Ìä∏:', noticesList.length, 'Í∞ú');
        setNotices(noticesList);
      },
      (error) => {
        console.error('‚ùå Í≥µÏßÄÏÇ¨Ìï≠ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
      }
    );

    return () => unsubscribe();
  }, []);

  // GitHub Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ (IndexedDB Ï∫êÏã±)
  const fetchRepositories = useCallback(async (forceRefresh = false) => {
    try {
      setLoadingRepos(true);

      // Ï∫êÏãú ÌôïÏù∏ (ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ®Ïù¥ ÏïÑÎãå Í≤ΩÏö∞)
      if (!forceRefresh) {
        try {
          const cached = await repositoriesDB.getByID(CACHE_KEY);
          if (cached) {
            const now = Date.now();
            const cacheAge = now - cached.timestamp;
            console.log(`‚úÖ Ï∫êÏãúÎêú Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ù ÏÇ¨Ïö© (IndexedDB) - ${Math.floor(cacheAge / 1000 / 60)}Î∂Ñ Ï†Ñ Ï∫êÏãú`);
            setRepositories(cached.data);
            setLoadingRepos(false);
            return;
          } else {
            console.log('üì≠ Ï∫êÏãú ÏóÜÏùå - API Ìò∏Ï∂ú');
          }
        } catch (cacheError) {
          console.error('‚ùå Ï∫êÏãú ÏùΩÍ∏∞ Ïã§Ìå®:', cacheError);
        }
      } else {
        console.log('üîÑ ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ® - API Ìò∏Ï∂ú');
      }

      // API Ìò∏Ï∂ú
      console.log('üåê APIÏóêÏÑú Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞...');
      const repos = await getRepositories();
      setRepositories(repos);

      // IndexedDBÏóê Ï∫êÏãú Ï†ÄÏû•
      try {
        const cacheData = {
          id: CACHE_KEY,
          data: repos,
          timestamp: Date.now(),
        };

        // Í∏∞Ï°¥ Ï∫êÏãú ÌôïÏù∏
        const existing = await repositoriesDB.getByID(CACHE_KEY);
        if (existing) {
          await repositoriesDB.update(cacheData);
        } else {
          await repositoriesDB.add(cacheData);
        }
        console.log('üíæ Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ù Ï∫êÏãú Ï†ÄÏû• ÏôÑÎ£å (IndexedDB)');
      } catch (saveError) {
        console.error('‚ùå Ï∫êÏãú Ï†ÄÏû• Ïã§Ìå®:', saveError);
      }
    } catch (error) {
      console.error('‚ùå Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
      setMessage({ type: 'error', text: 'Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
    } finally {
      setLoadingRepos(false);
    }
  }, []);

  // Î∏åÎûúÏπò Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ (IndexedDB Ï∫êÏã±)
  const fetchBranches = useCallback(async (owner: string, repo: string, forceRefresh = false) => {
    try {
      setLoadingBranches(true);
      const cacheKey = getBranchCacheKey(owner, repo);

      // Ï∫êÏãú ÌôïÏù∏ (ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ®Ïù¥ ÏïÑÎãå Í≤ΩÏö∞)
      if (!forceRefresh) {
        try {
          const cached = await repositoriesDB.getByID(cacheKey);
          if (cached) {
            const now = Date.now();
            const cacheAge = now - cached.timestamp;
            console.log(`‚úÖ Ï∫êÏãúÎêú Î∏åÎûúÏπò Î™©Î°ù ÏÇ¨Ïö© (IndexedDB) - ${Math.floor(cacheAge / 1000 / 60)}Î∂Ñ Ï†Ñ Ï∫êÏãú`);
            setBranches(cached.data);
            setLoadingBranches(false);
            return;
          } else {
            console.log('üì≠ Î∏åÎûúÏπò Ï∫êÏãú ÏóÜÏùå - API Ìò∏Ï∂ú');
          }
        } catch (cacheError) {
          console.error('‚ùå Î∏åÎûúÏπò Ï∫êÏãú ÏùΩÍ∏∞ Ïã§Ìå®:', cacheError);
        }
      } else {
        console.log('üîÑ ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ® - API Ìò∏Ï∂ú');
      }

      // API Ìò∏Ï∂ú
      console.log(`üåø APIÏóêÏÑú Î∏åÎûúÏπò Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞: ${owner}/${repo}`);
      const branchList = await getBranches(owner, repo);
      setBranches(branchList);
      console.log(`‚úÖ ${branchList.length}Í∞úÏùò Î∏åÎûúÏπò Î∞úÍ≤¨`);

      // IndexedDBÏóê Ï∫êÏãú Ï†ÄÏû•
      try {
        const cacheData = {
          id: cacheKey,
          data: branchList,
          timestamp: Date.now(),
        };

        // Í∏∞Ï°¥ Ï∫êÏãú ÌôïÏù∏
        const existing = await repositoriesDB.getByID(cacheKey);
        if (existing) {
          await repositoriesDB.update(cacheData);
        } else {
          await repositoriesDB.add(cacheData);
        }
        console.log('üíæ Î∏åÎûúÏπò Î™©Î°ù Ï∫êÏãú Ï†ÄÏû• ÏôÑÎ£å (IndexedDB)');
      } catch (saveError) {
        console.error('‚ùå Î∏åÎûúÏπò Ï∫êÏãú Ï†ÄÏû• Ïã§Ìå®:', saveError);
      }
    } catch (error) {
      console.error('‚ùå Î∏åÎûúÏπò Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
      setMessage({ type: 'error', text: 'Î∏åÎûúÏπò Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
      setBranches([]);
    } finally {
      setLoadingBranches(false);
    }
  }, [repositoriesDB]);

  // ÏÑ§Ï†ï Î∞è Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    let mounted = true;

    const loadSettings = async () => {
      const user = auth.currentUser;
      if (!user) {
        setLoading(false);
        return;
      }

      try {
        const userDoc = await getDoc(doc(db, 'users', user.uid));
        if (userDoc.exists()) {
          const data = userDoc.data();
          
          // Ï†ÄÏû•Îêú ÏÑ§Ï†ï Î∂àÎü¨Ïò§Í∏∞
          if (mounted) {
            setSettings({
              repositoryFullName: data.repositoryFullName || '',
              repositoryUrl: data.repositoryUrl || '',
              branch: data.branch || 'main',
            });

            // Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Í∞Ä ÏÑ†ÌÉùÎêòÏñ¥ ÏûàÏúºÎ©¥ Î∏åÎûúÏπò Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
            if (data.repositoryFullName) {
              const [owner, repo] = data.repositoryFullName.split('/');
              await fetchBranches(owner, repo);
            }
          }
        }

        // Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ (Ï∫êÏãú Ïö∞ÏÑ†)
        if (mounted) {
          await fetchRepositories();
        }
      } catch (error) {
        console.error('ÏÑ§Ï†ï Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
        if (mounted) {
          setMessage({ type: 'error', text: 'ÏÑ§Ï†ïÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        }
      } finally {
        if (mounted) {
          setLoading(false);
        }
      }
    };

    loadSettings();

    return () => {
      mounted = false;
    };
  }, []); // ÎßàÏö¥Ìä∏ Ïãú Ìïú Î≤àÎßå Ïã§Ìñâ

  // Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ ÏÑ†ÌÉù (ÏÉÅÌÉúÎßå Î≥ÄÍ≤Ω)
  const handleRepositorySelect = async (repo: Repository) => {
    setIsDropdownOpen(false);
    setMessage(null);

    // ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
    setSettings({
      repositoryFullName: repo.full_name,
      repositoryUrl: repo.html_url,
      branch: 'main', // Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î≥ÄÍ≤Ω Ïãú Í∏∞Î≥∏ Î∏åÎûúÏπòÎ°ú Ï¥àÍ∏∞Ìôî
    });

    // Î∏åÎûúÏπò Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
    const [owner, repoName] = repo.full_name.split('/');
    await fetchBranches(owner, repoName);
  };

  // ÏÑ§Ï†ï Ï†ÄÏû•
  const handleSaveSettings = async () => {
    const user = auth.currentUser;
    
    if (!user) {
      setMessage({ type: 'error', text: 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.' });
      return;
    }

    if (!settings.repositoryFullName) {
      setMessage({ type: 'error', text: 'Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.' });
      return;
    }

    if (!settings.branch) {
      setMessage({ type: 'error', text: 'Î∏åÎûúÏπòÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.' });
      return;
    }

    setSaving(true);
    setMessage(null);

    try {
      // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
      const userDoc = await getDoc(doc(db, 'users', user.uid));
      const existingData = userDoc.exists() ? userDoc.data() : {};

      // full_nameÏóêÏÑú usernameÍ≥º repository Î∂ÑÎ¶¨
      const [githubUsername, repositoryName] = settings.repositoryFullName.split('/');

      // FirestoreÏóê ÏÑ§Ï†ï Ï†ÄÏû•
      await setDoc(doc(db, 'users', user.uid), {
        ...existingData,
        repositoryFullName: settings.repositoryFullName,
        repositoryUrl: settings.repositoryUrl,
        githubUsername,
        repositoryName,
        branch: settings.branch,
        updatedAt: new Date().toISOString(),
      });

      // Ï†ÄÏû• ÌõÑ Ìï≠ÏÉÅ ÌîåÎûòÏãúÏπ¥Îìú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†úÌïòÍ≥† ÏÉàÎ°ú ÏÉùÏÑ±
      try {
        // Î™®Îì† Ï∫êÏãúÎêú ÌîåÎûòÏãúÏπ¥Îìú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
        await flashcardsDB.clear();
        console.log('üóëÔ∏è ÌîåÎûòÏãúÏπ¥Îìú Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌñàÏäµÎãàÎã§.');
        
        setMessage({ type: 'success', text: '‚úÖ ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§. ÏÉàÎ°úÏö¥ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨ÏòµÎãàÎã§...' });
        
        // ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®ÏúºÎ°ú ÌîåÎûòÏãúÏπ¥Îìú ÏÉàÎ°ú ÏÉùÏÑ±
        setTimeout(() => {
          window.location.reload();
        }, 500);
      } catch (clearError) {
        console.error('‚ùå ÌîåÎûòÏãúÏπ¥Îìú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ïã§Ìå®:', clearError);
        setMessage({ type: 'error', text: 'Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.' });
        setSaving(false);
      }
    } catch (error) {
      console.error('ÏÑ§Ï†ï Ï†ÄÏû• Ïã§Ìå®:', error);
      setMessage({ type: 'error', text: 'ÏÑ§Ï†ï Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
      setSaving(false);
    }
  };

  // ÏÑ†ÌÉùÎêú Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Ï∞æÍ∏∞
  const selectedRepo = repositories.find(repo => repo.full_name === settings.repositoryFullName);

  // Î°úÍ∑∏ÏïÑÏõÉ Ìï∏Îì§Îü¨
  const handleLogout = async () => {
    try {
      await auth.signOut();
    } catch (error) {
      console.error('Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®:', error);
      setMessage({ type: 'error', text: 'Î°úÍ∑∏ÏïÑÏõÉÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
    }
  };

  // ÌöåÏõêÌÉàÌá¥ Ìï∏Îì§Îü¨
  const handleDeleteAccount = async () => {
    const user = auth.currentUser;
    
    if (!user) {
      setMessage({ type: 'error', text: 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.' });
      return;
    }

    if (deleteConfirmText !== 'ÌöåÏõêÌÉàÌá¥') {
      setMessage({ type: 'error', text: '"ÌöåÏõêÌÉàÌá¥"Î•º Ï†ïÌôïÌûà ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' });
      return;
    }

    try {
      setDeleting(true);
      setMessage(null);

      // 1. ÌÉàÌá¥ Í∏∞Î°ù ÏÉùÏÑ± (Ïû¨Í∞ÄÏûÖ Î∞©ÏßÄÏö©)
      await setDoc(doc(db, 'deletedUsers', user.uid), {
        deletedAt: new Date().toISOString(),
        email: user.email,
        githubUsername: user.displayName,
      });
      
      // 2. Firestore ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
      await deleteDoc(doc(db, 'users', user.uid));
      
      // 3. IndexedDB Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
      try {
        await flashcardsDB.clear();
        await repositoriesDB.clear();
        console.log('üóëÔ∏è IndexedDB Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å');
      } catch (dbError) {
        console.error('‚ùå IndexedDB ÏÇ≠Ï†ú Ïã§Ìå®:', dbError);
      }
      
      // 4. Firebase Auth Í≥ÑÏ†ï ÏÇ≠Ï†ú
      await user.delete();
      
      console.log('‚úÖ ÌöåÏõêÌÉàÌá¥ ÏôÑÎ£å');
    } catch (error: any) {
      console.error('ÌöåÏõêÌÉàÌá¥ Ïã§Ìå®:', error);
      
      // Ïû¨Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ (Îã§ÏñëÌïú Ïò§Î•ò ÏΩîÎìú Ï≤òÎ¶¨)
      const needsReauth = 
        error.code === 'auth/requires-recent-login' ||
        error.message?.includes('CREDENTIAL_TOO_OLD') ||
        error.message?.includes('LOGIN_AGAIN');
      
      if (needsReauth) {
        try {
          // ÏûêÎèôÏúºÎ°ú Ïû¨Ïù∏Ï¶ù ÏãúÎèÑ
          console.log('üîÑ Ïû¨Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§. GitHub Î°úÍ∑∏Ïù∏ ÌåùÏóÖÏùÑ ÏóΩÎãàÎã§...');
          setMessage({ 
            type: 'error', 
            text: 'Î≥¥ÏïàÏùÑ ÏúÑÌï¥ Ïû¨Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§. ÌåùÏóÖÏóêÏÑú GitHub Î°úÍ∑∏Ïù∏ÏùÑ ÏßÑÌñâÌï¥Ï£ºÏÑ∏Ïöî.' 
          });
          
          await reauthenticateWithPopup(user, githubProvider);
          console.log('‚úÖ Ïû¨Ïù∏Ï¶ù ÏôÑÎ£å');
          
          // Ïû¨Ïù∏Ï¶ù ÌõÑ Îã§Ïãú Í≥ÑÏ†ï ÏÇ≠Ï†ú ÏãúÎèÑ
          setMessage({ type: 'error', text: 'Ïû¨Ïù∏Ï¶ùÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú ÌÉàÌá¥Î•º ÏãúÎèÑÌï©ÎãàÎã§...' });
          
          // 1. ÌÉàÌá¥ Í∏∞Î°ù ÏÉùÏÑ±
          await setDoc(doc(db, 'deletedUsers', user.uid), {
            deletedAt: new Date().toISOString(),
            email: user.email,
            githubUsername: user.displayName,
          });
          
          // 2. Firestore ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
          await deleteDoc(doc(db, 'users', user.uid));
          
          // 3. IndexedDB Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
          try {
            await flashcardsDB.clear();
            await repositoriesDB.clear();
            console.log('üóëÔ∏è IndexedDB Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å');
          } catch (dbError) {
            console.error('‚ùå IndexedDB ÏÇ≠Ï†ú Ïã§Ìå®:', dbError);
          }
          
          // 4. Firebase Auth Í≥ÑÏ†ï ÏÇ≠Ï†ú
          await user.delete();
          
          console.log('‚úÖ ÌöåÏõêÌÉàÌá¥ ÏôÑÎ£å');
        } catch (reauthError: any) {
          console.error('Ïû¨Ïù∏Ï¶ù Ïã§Ìå®:', reauthError);
          
          if (reauthError.code === 'auth/popup-closed-by-user') {
            setMessage({ 
              type: 'error', 
              text: 'Ïû¨Ïù∏Ï¶ùÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§. ÌÉàÌá¥Î•º Í≥ÑÏÜçÌïòÎ†§Î©¥ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.' 
            });
          } else {
            setMessage({ 
              type: 'error', 
              text: 'Ïû¨Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.' 
            });
          }
          setDeleting(false);
        }
      } else {
        setMessage({ type: 'error', text: 'ÌöåÏõêÌÉàÌá¥Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        setDeleting(false);
      }
    }
  };

  if (loading) {
    return (
      <div className="settings-container">
        <div className="settings-card">
          <div className="loading-spinner"></div>
          <p>ÏÑ§Ï†ïÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="settings-container">
      <div className="settings-card">
        {/* Í≥µÏßÄÏÇ¨Ìï≠ */}
        {notices.length > 0 && (
          <div className="notice-banner">
            <div className="notice-icon">üì¢</div>
            <div className="notice-content">
              {notices.map((notice, index) => (
                <p key={notice.id} className="notice-text" style={{ marginBottom: index < notices.length - 1 ? '8px' : '0' }}>
                  {notice.message}
                </p>
              ))}
            </div>
          </div>
        )}

        <div className="settings-form">
          <div className="form-group">
            <div className="form-label-row">
              <label htmlFor="repository">
                GitHub Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨
                <span className="required">*</span>
              </label>
              <button
                type="button"
                className="refresh-button"
                onClick={() => fetchRepositories(true)}
                disabled={loadingRepos}
                title="Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®"
              >
                {loadingRepos ? '‚è≥' : 'üîÑ'}
              </button>
            </div>
            
            <p className="form-hint">
              {repositories.length > 0 
                ? `Ï¥ù ${repositories.length}Í∞úÏùò Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Î•º Ï∞æÏïòÏäµÎãàÎã§`
                : 'Ï†ëÍ∑º Í∞ÄÎä•Ìïú Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Í∞Ä ÏóÜÏäµÎãàÎã§'}
            </p>
            
            {loadingRepos ? (
              <div className="loading-repos">
                <div className="loading-spinner-small"></div>
                <span>Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</span>
              </div>
            ) : (
              <div className="custom-select-container" ref={dropdownRef}>
                <button
                  type="button"
                  className={`custom-select-trigger ${isDropdownOpen ? 'open' : ''} ${saving ? 'saving' : ''}`}
                  onClick={() => !saving && setIsDropdownOpen(!isDropdownOpen)}
                  disabled={repositories.length === 0 || saving}
                >
                  {saving ? (
                    <div className="selected-repo">
                      <div className="loading-spinner-small"></div>
                      <span className="repo-name">Ï†ÄÏû• Ï§ë...</span>
                    </div>
                  ) : selectedRepo ? (
                    <div className="selected-repo">
                      <span className="repo-name">{selectedRepo.full_name}</span>
                      <span className="repo-badge">{selectedRepo.private ? 'üîí Private' : 'üåê Public'}</span>
                    </div>
                  ) : (
                    <span className="placeholder">Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</span>
                  )}
                  <span className="dropdown-arrow">{isDropdownOpen ? '‚ñ≤' : '‚ñº'}</span>
                </button>

                {isDropdownOpen && !saving && (
                  <div className="custom-select-dropdown">
                    {repositories.map((repo) => (
                      <div
                        key={repo.id}
                        className={`custom-select-option ${settings.repositoryFullName === repo.full_name ? 'selected' : ''}`}
                        onClick={() => handleRepositorySelect(repo)}
                      >
                        <div className="option-header">
                          <span className="option-name">{repo.full_name}</span>
                          <span className="option-badge">{repo.private ? 'üîí' : 'üåê'}</span>
                        </div>
                        {repo.description && (
                          <div className="option-description">{repo.description}</div>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>

          {settings.repositoryFullName && (
            <>
              <div className="form-preview">
                <p className="preview-label">üìÇ ÏÑ†ÌÉùÎêú Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨:</p>
                <code className="preview-path">
                  <a 
                    href={settings.repositoryUrl} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="repo-link"
                  >
                    {settings.repositoryUrl}
                  </a>
                </code>
              </div>

              <div className="form-group">
                <div className="form-label-row">
                  <label htmlFor="branch">
                    Î∏åÎûúÏπò Ïù¥Î¶Ñ
                    <span className="required">*</span>
                  </label>
                  {settings.repositoryFullName && (
                    <button
                      type="button"
                      className="refresh-button"
                      onClick={() => {
                        const [owner, repoName] = settings.repositoryFullName.split('/');
                        fetchBranches(owner, repoName, true);
                      }}
                      disabled={loadingBranches}
                      title="Î∏åÎûúÏπò Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®"
                    >
                      {loadingBranches ? '‚è≥' : 'üîÑ'}
                    </button>
                  )}
                </div>
                <p className="form-hint">
                  Ïª§Î∞ãÏùÑ Í∞ÄÏ†∏Ïò¨ Î∏åÎûúÏπòÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî
                  {branches.length > 0 && ` (Ï¥ù ${branches.length}Í∞úÏùò Î∏åÎûúÏπò)`}
                </p>
                
                {loadingBranches ? (
                  <div className="loading-repos">
                    <div className="loading-spinner-small"></div>
                    <span>Î∏åÎûúÏπò Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</span>
                  </div>
                ) : branches.length > 0 ? (
                  <div className="custom-select-container" ref={branchDropdownRef}>
                    <button
                      type="button"
                      className={`custom-select-trigger ${isBranchDropdownOpen ? 'open' : ''} ${saving ? 'saving' : ''}`}
                      onClick={() => !saving && setIsBranchDropdownOpen(!isBranchDropdownOpen)}
                      disabled={saving}
                    >
                      {saving ? (
                        <div className="selected-repo">
                          <div className="loading-spinner-small"></div>
                          <span className="repo-name">Ï†ÄÏû• Ï§ë...</span>
                        </div>
                      ) : (
                        <div className="selected-repo">
                          <span className="repo-name">{settings.branch}</span>
                          {branches.find(b => b.name === settings.branch)?.protected && (
                            <span className="repo-badge">üîí Protected</span>
                          )}
                        </div>
                      )}
                      <span className="dropdown-arrow">{isBranchDropdownOpen ? '‚ñ≤' : '‚ñº'}</span>
                    </button>

                    {isBranchDropdownOpen && !saving && (
                      <div className="custom-select-dropdown">
                        {branches.map((branch) => (
                          <div
                            key={branch.name}
                            className={`custom-select-option ${settings.branch === branch.name ? 'selected' : ''}`}
                            onClick={() => {
                              setSettings({ ...settings, branch: branch.name });
                              setIsBranchDropdownOpen(false);
                            }}
                          >
                            <div className="option-header">
                              <span className="option-name">{branch.name}</span>
                              {branch.protected && <span className="option-badge">üîí</span>}
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ) : (
                  <p className="form-hint" style={{ color: '#999', fontStyle: 'italic' }}>
                    Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Î•º ÏÑ†ÌÉùÌïòÎ©¥ Î∏åÎûúÏπò Î™©Î°ùÏù¥ ÌëúÏãúÎê©ÎãàÎã§.
                  </p>
                )}
              </div>
            </>
          )}

          {message && (
            <div className={`message ${message.type}`}>
              {message.text}
            </div>
          )}

          {settings.repositoryFullName && (
            <button
              type="button"
              className="save-settings-button"
              onClick={handleSaveSettings}
              disabled={saving || !settings.repositoryFullName || !settings.branch}
            >
              {saving ? 'Ï†ÄÏû• Ï§ë...' : 'üöÄ ÏÑ§Ï†ï Ï†ÄÏû•'}
            </button>
          )}
        </div>
        <p className="info-text">
          ‚ÑπÔ∏è GitHub OAuthÎ°ú Î°úÍ∑∏Ïù∏ÌïòÏó¨ Ï†ëÍ∑º Í∞ÄÎä•Ìïú Î™®Îì† Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Í∞Ä ÌëúÏãúÎê©ÎãàÎã§.
        </p>
        <p className="info-text">
          üîí = Private Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨, üåê = Public Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨
        </p>

        {/* Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏ */}
        <div className="release-note-zone">
          <h2 className="release-note-title">üìù Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏</h2>
          <p className="release-note-description">
            ÏÉàÎ°úÏö¥ Í∏∞Îä•Í≥º Í∞úÏÑ†ÏÇ¨Ìï≠ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî
          </p>
          <a
            href="https://www.notion.so/chucoding/RELEASE_NOTE-287fd64d44a080cd9564d2492b7de718"
            target="_blank"
            rel="noopener noreferrer"
            className="release-note-button"
          >
            üìã Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏ Î≥¥Í∏∞
          </a>
        </div>

        {/* Í≥ÑÏ†ï Í¥ÄÎ¶¨ */}
        <div className="account-zone">
          <h2 className="account-zone-title">üë§ Í≥ÑÏ†ï Í¥ÄÎ¶¨</h2>
          <p className="account-description">
            Í≥ÑÏ†ï Î°úÍ∑∏ÏïÑÏõÉ ÎòêÎäî ÏÑúÎπÑÏä§ ÌÉàÌá¥Î•º ÏßÑÌñâÌï† Ïàò ÏûàÏäµÎãàÎã§.
          </p>
          <div className="account-buttons">
            <button
              type="button"
              className="logout-button"
              onClick={handleLogout}
            >
              üö™ Î°úÍ∑∏ÏïÑÏõÉ
            </button>
            <button
              type="button"
              className="delete-account-button"
              onClick={() => setShowDeleteDialog(true)}
            >
              ÏÑúÎπÑÏä§ ÌÉàÌá¥
            </button>
          </div>
        </div>

        {/* Ïù¥Ïö©ÏïΩÍ¥Ä ÎßÅÌÅ¨ */}
        <div className="settings-footer">
          <TermsLinks />
        </div>
      </div>

      {/* ÏÑúÎπÑÏä§ ÌÉàÌá¥ ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      {showDeleteDialog && (
        <div className="modal-overlay" onClick={() => !deleting && setShowDeleteDialog(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <h2 className="modal-title">üëã ÏÑúÎπÑÏä§ ÌÉàÌá¥</h2>
            <p className="modal-description">
              Ï†ïÎßê ÌÉàÌá¥ÌïòÏãúÍ≤†Ïñ¥Ïöî? Í±±Ï†ïÌïòÏßÄ ÎßàÏÑ∏Ïöî, Ïñ∏Ï†úÎì† Îã§Ïãú ÎèåÏïÑÏò¨ Ïàò ÏûàÏäµÎãàÎã§.
            </p>
            <div className="modal-info-box">
              <p className="info-box-title">‚ú® ÌÉàÌá¥ Ïãú ÏïàÎÇ¥ÏÇ¨Ìï≠</p>
              <ul className="modal-info-list">
                <li>Ï†ÄÏû•Îêú Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎê©ÎãàÎã§</li>
                <li>ÌÉàÌá¥ ÌõÑ 24ÏãúÍ∞Ñ Ïù¥ÎÇ¥ÏóêÎäî Ïû¨Í∞ÄÏûÖÌï† Ïàò ÏóÜÏäµÎãàÎã§</li>
                <li className="info-reauth">üí° Î≥¥ÏïàÏùÑ ÏúÑÌï¥ GitHub Ïû¨Ïù∏Ï¶ù ÌåùÏóÖÏù¥ ÌëúÏãúÎê† Ïàò ÏûàÏäµÎãàÎã§</li>
              </ul>
            </div>
            
            <div className="form-group">
              <label htmlFor="confirmText">
                ÌôïÏù∏ÏùÑ ÏúÑÌï¥ <strong>"ÌöåÏõêÌÉàÌá¥"</strong>Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî:
              </label>
              <input
                id="confirmText"
                type="text"
                value={deleteConfirmText}
                onChange={(e) => setDeleteConfirmText(e.target.value)}
                placeholder="ÌöåÏõêÌÉàÌá¥"
                disabled={deleting}
                className="confirm-input"
              />
            </div>

            {message && message.type === 'error' && (
              <div className="message error">
                {message.text}
              </div>
            )}

            <div className="modal-actions">
              <button
                type="button"
                className="modal-button cancel"
                onClick={() => {
                  setShowDeleteDialog(false);
                  setDeleteConfirmText('');
                  setMessage(null);
                }}
                disabled={deleting}
              >
                Ï∑®ÏÜå
              </button>
              <button
                type="button"
                className="modal-button danger"
                onClick={handleDeleteAccount}
                disabled={deleting || deleteConfirmText !== 'ÌöåÏõêÌÉàÌá¥'}
              >
                {deleting ? 'ÌÉàÌá¥ Ï≤òÎ¶¨ Ï§ë...' : 'ÌÉàÌá¥ÌïòÍ∏∞'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Settings;

